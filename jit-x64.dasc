#include <stdint.h>
#include "util.h"

|.arch x64
|.actionlist actions
|
|// Use rbx as our cell pointer.
|// Since rbx is a callee-save register, it will be preserved
|// across our calls to getchar and putchar.
|.define PTR, rbx
|
|// Macro for calling a function.
|// In cases where our target is <=2**32 away we can use
|//   | call &addr
|// But since we don't know if it will be, we use this safe
|// sequence instead.
|.macro callp, addr
|  mov64  rax, (uintptr_t)addr
|  call   rax
|.endmacro

#define Dst &state
#define MAX_NESTING 256
#define true 1
#define false 0
//int samePattern(char **p);
//int zeroLoop(char **p);
//int moveLoop(char **p);

int main(int argc, char *argv[])
{
    if (argc < 2) err("Usage: jit-x64 <inputfile>");
    dasm_State *state;
    initjit(&state, actions);

    unsigned int maxpc = 0;
    int pcstack[MAX_NESTING];
    int *top = pcstack, *limit = pcstack + MAX_NESTING;
    int count;
    // Function prologue.
    |  push PTR
    |  mov  PTR, rdi      // rdi store 1st argument

    for (char *p = read_file(argv[1]); *p; p++) {
        switch (*p) {
            case '>':
                count = samePattern(&p);
                p += count-1;
                if(count == 1)
                    | inc PTR
                    else
                        | add PTR ,count
                        break;
            case '<':
                count = samePattern(&p);
                p += count -1;
                if(count == 1)
                    | dec PTR
                    else
                        | sub PTR ,count
                        break;
            case '+':
                count = samePattern(&p);
                p += count-1;
                if(count == 1)
                    | inc byte[PTR]
                    else
                        | add byte[PTR] ,count
                        break;
            case '-':
                count = samePattern(&p);
                p += count-1;
                if(count == 1)
                    | dec byte[PTR]
                    else
                        | sub byte[PTR] ,count
                        break;
            case '.':
                |  movzx edi, byte [PTR]
                |  callp putchar
                break;
            case ',':
                |  callp getchar
                |  mov   byte [PTR], al
                break;
            case '[':
                if(zeroLoop(&p)) {
                    | mov byte[PTR], 0
                    p = p + 2;
                }
                if(moveLoop(&p)) {
                    | mov cl, byte[PTR]
                    | add byte [PTR+1],cl
                    | mov byte[PTR],0
                    p = p + 5;
                }
                if (top == limit) err("Nesting too deep.");
                // Each loop gets two pclabels: at the beginning and end.
                // We store pclabel offsets in a stack to link the loop
                // begin and end together.
                maxpc += 2;
                *top++ = maxpc;
                dasm_growpc(&state, maxpc);
                |  cmp  byte [PTR], 0
                |  je   =>(maxpc-2)
                |=>(maxpc-1):
                      break;
                case ']':
                    if (top == pcstack) err("Unmatched ']'");
                    top--;
                    |  cmp  byte [PTR], 0
                    |  jne  =>(*top-1)
                    |=>(*top-2):
                      break;
            }
        }

        // Function epilogue.
        |  pop  PTR
        |  ret

        void (*fptr)(char*) = jitcode(&state);
        char *mem = calloc(30000, 1);
        fptr(mem);
        free(mem);
        free_jitcode(fptr);
        return 0;
    }


    int samePattern(char **p)
{
    char operator = **p;
    int same_count = 0;
    while(**p == operator) {
        (*p)++;
        same_count++;
    }
    return same_count;
}

int zeroLoop(char **p)
{
//	char *old_p = *p;
    if(**(p+1) == '-') {
        if(**(p+2) == ']') {
            return true;
        }
    }
    printf("123");
//	*p = old_p;
    return false;
}

int moveLoop(char **p)
{
    if(**(p+1) == '>' && **(p+2) == '+' && **(p+3) == '<' && **(p+4) == '-' && **(p+5) == ']') {
        return true;
    } else if(**(p+1) == '-' && **(p+2) == '>' && **(p+3) == '+' && **(p+4) == '<' && **(p+5) == ']') {
        return true;
    }
    return false;
}
