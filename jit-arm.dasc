#include <stdint.h>
#include "util.h"
#include <time.h>
|.arch arm
|.actionlist actions
|
|// Use r4 as our cell pointer.
|// Since r4 is a callee-save register, it will be preserved
|// across our calls to getchar and putchar.
|.define PTR, r4

#define Dst &state
#define MAX_NESTING 256
static double diff_in_second(struct timespec t1,struct timespec t2)
{
    struct timespec diff;
    if(t2.tv_nsec-t1.tv_nsec < 0) {
        diff.tv_sec = t2.tv_sec - t1.tv_sec -1;
        diff.tv_nsec = t2.tv_nsec - t1.tv_nsec + 1000000000;
    } else {
        diff.tv_sec = t2.tv_sec - t1.tv_sec;
        diff.tv_nsec = t2.tv_nsec - t1.tv_nsec;
    }
    return (diff.tv_sec + diff.tv_nsec / 1000000000.0);
}

int main(int argc, char *argv[])
{
    if (argc < 2) err("Usage: jit-arm <inputfile>");
    dasm_State *state;
    initjit(&state, actions);

    struct timespec start,end;
    double cpu_time;
    unsigned int maxpc = 0;
    int pcstack[MAX_NESTING];
    int *top = pcstack, *limit = pcstack + MAX_NESTING;
    FILE *fp = fopen("test.txt","a");

    clock_gettime(CLOCK_REALTIME, &start);
    // Function prologue.
    |  push {PTR, r5, r6, r7, lr}
    |  mov  PTR, r0
    int count;
    for (char *p = read_file(argv[1]); *p; p++) {
        switch (*p) {
            case '>':
                count = 1;
                while(*(++p) == '>') {
                    count++;
                }
                p--;
                |  add  PTR, PTR, #count
                break;
            case '<':
                count = 1;
                while(*(++p) == '<') {
                    count++;
                }
                p--;
                |  sub  PTR, PTR, #count
                break;
            case '+':
                count = 1;
                while(*(++p) == '+') {
                    count++;
                }
                p--;
                |  ldrb  r5, [PTR]
                |  add   r5, r5, #count
                |  strb  r5, [PTR]
                break;
            case '-':
                count = 1;
                while(*(++p) == '-') {
                    count++;
                }
                p--;
                |  ldrb  r5, [PTR]
                |  sub   r5, r5, #count
                |  strb  r5, [PTR]
                break;
            case '.':
                |  mov r0, #1   // stdout
                |  mov r1, PTR
                |  mov r2, #1
                |  mov r7, #4   // sys_write
                |  svc #0
                break;
            case ',':
                |  mov r0, #0   // stdin
                |  mov r1, PTR
                |  mov r2, #1
                |  mov r7, #3   // sys_read
                |  svc #0
                break;
            case '[':
                if (top == limit) err("Nesting too deep.");
                // Each loop gets two pclabels: at the beginning and end.
                // We store pclabel offsets in a stack to link the loop
                // begin and end together.
                if ( *(p+1) == '-' && *(p+2) == ']') {
                    p += 2;
                    | ldrb r5, [PTR]
                    | mov r5, #0
                    | strb r5, [PTR]
                    break;
                }/*
                if( *(p+1) == '>' && *(p+2) == '+' && *(p+3) == '<' && *(p+4) == '-' && *(p+5) == ']') {
                    p += 5;
                    | ldrb r5, [PTR]
                    | ldrb r6 ,[PTR, #1]
                    | add r6, r5, r6
                    | strb r6, [PTR, #1]
                    | mov r5 , #0
                    | strb r5, [PTR]
                    break;
                }*/
				if( *(p+1) == '-' && *(p+2) == '>' && *(p+3) == '+' && *(p+4) == '<' && *(p+5) == ']') {
					p += 5;
					| ldrb r5, [PTR]
					| ldrb r6, [PTR, #1]
					| add r5, r5, r6
					| strb r5, [PTR]
					| mov r6, #0
					| strb r6, [PTR, #1]
				}

                maxpc += 2;     // add two labels
                *top++ = maxpc;
                dasm_growpc(&state, maxpc);
                |  ldrb  r5, [PTR]
                |  cmp   r5, #0
                |  beq   =>(maxpc-2)
                |=>(maxpc-1):
                      break;
                case ']':
                    if (top == pcstack) err("Unmatched ']'");
                    top--;
                    |  ldrb  r5, [PTR]
                    |  cmp   r5, #0
                    |  bne   =>(*top-1)
                    |=>(*top-2):
                      break;
            }
        }

        // Function epilogue.
        |  pop  {PTR, r5, r6, r7, pc}

        void (*fptr)(char*) = jitcode(&state);
        char *mem = calloc(30000, 1);
        fptr(mem);
        free(mem);
        free_jitcode(fptr);
        clock_gettime(CLOCK_REALTIME, &end);
        cpu_time = diff_in_second(start,end);
        fprintf(fp,"execution time : %1f sec\n", cpu_time);
        fclose(fp);
        return 0;
    }
